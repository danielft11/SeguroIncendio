@model SeguroIncendio.Models.Orcamento

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="panel panel-default" style="margin-top:5px">
        <div class="panel-heading">
            Inclusão de orçamento:
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Inquilino)
                        @Html.EditorFor(model => model.Inquilino, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Nome do inquilino", tabindex = 1 }})
                        @Html.ValidationMessageFor(model => model.Inquilino, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Proprietario)
                        @Html.EditorFor(model => model.Proprietario, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "Nome do proprietário", tabindex = 4 } })
                        @Html.ValidationMessageFor(model => model.Proprietario, "", new { @class = "text-danger" })
                    </div>
                </div>@*Nome do inquilino e do proprietário*@
                <div class="col-lg-2">
                    <div class="form-group">
                        <label class="radio">
                            @Html.RadioButtonFor(model => model.TipoInquilino, 0, new { id = "optionsRadiosInquilino0", name = "optionsRadiosInquilino", value = 0, tabindex = 2 }) Pessoa Física
                        </label>
                        <label class="radio">
                            @Html.RadioButtonFor(model => model.TipoInquilino, 1, new { id = "optionsRadiosInquilino1", name = "optionsRadiosInquilino", value = 1 })Pessoa Jurídica
                        </label>
                    </div>
                    <div class="form-group">
                        <label class="radio">
                            @Html.RadioButtonFor(model => model.TipoProprietario, 0, new { id = "optionsRadiosProprietario0", name = "optionsRadiosProprietario", value = 0, tabindex = 5 })Pessoa Física
                        </label>
                        <label class="radio">
                            @Html.RadioButtonFor(model => model.TipoProprietario, 1, new { id = "optionsRadiosProprietario1", name = "optionsRadiosProprietario", value = 1 })Pessoa Jurídica
                        </label>
                    </div>

                </div>@*Checkbox para tipo do inquilino e do proprietário*@
                <div class="col-lg-5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CpfCnpjInquilino)
                        @Html.EditorFor(model => model.CpfCnpjInquilino, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "CPF/CNPJ do inquilino", tabindex = 3 } })
                        @Html.ValidationMessageFor(model => model.CpfCnpjInquilino, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CpfCnpjProprietario)
                        @Html.EditorFor(model => model.CpfCnpjProprietario, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "CPF/CNPJ do proprietário", tabindex = 6 } })
                        @Html.ValidationMessageFor(model => model.CpfCnpjProprietario, "", new { @class = "text-danger" })
                    </div>
                </div>@*CPF e CNPJ do inquilino e do proprietário*@
            </div>@*Primeira linha: dados do inquilino e proprietário.*@
            <div class="row">
                <div class="col-lg-2">
                    <label>CEP:</label>
                    <div class="input-group">
                        @Html.EditorFor(model => model.CEP, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 7 } })
                        @Html.ValidationMessageFor(model => model.CEP, "", new { @class = "text-danger" })
                    </div>
                </div>@*CEP*@
                <div class="col-lg-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Endereco)
                        @Html.EditorFor(model => model.Endereco, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 8 } })
                        @Html.ValidationMessageFor(model => model.Endereco, "", new { @class = "text-danger" })
                    </div>
                </div>@*Endereço*@
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Numero)
                        @Html.EditorFor(model => model.Numero, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 9 } })
                        @Html.ValidationMessageFor(model => model.Numero, "", new { @class = "text-danger" })
                    </div>
                </div>@*Número*@
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Complemento)
                        @Html.EditorFor(model => model.Complemento, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 10 } })
                        @Html.ValidationMessageFor(model => model.Complemento, "", new { @class = "text-danger" })
                    </div>
                </div>@*Complemento*@
            </div>@*Segunda linha: dados de endereço.*@
            <div class="row">
                <div class="col-lg-5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Bairro)
                        @Html.EditorFor(model => model.Bairro, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 11 } })
                        @Html.ValidationMessageFor(model => model.Bairro, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-lg-5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Cidade)
                        @Html.EditorFor(model => model.Cidade, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 12 } })
                        @Html.ValidationMessageFor(model => model.Cidade, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Estado)
                        @Html.EditorFor(model => model.Estado, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 13 } })
                        @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>@*Terceira linha: dados de endereço.*@
            <div class="row">
                <div class="col-lg-5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.IdentificacaoCategoria)
                        @Html.DropDownList("IdentificacaoCategoria", null, string.Empty, new { @class = "form-control input-sm", tabindex = 14 })
                        @Html.ValidationMessageFor(model => model.tipoImovel.CategoriaImovelId, "", new { @class = "text-danger" })
                    </div>
                </div>@*Tipo de imóvel*@
                <div class="col-lg-5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.TipoImovelId)
                        @Html.DropDownList("TipoImovelId", null, string.Empty, new { @class = "form-control input-sm", tabindex = 15 })
                        @*@Html.DropDownListFor(model => model.TipoImovelId, new SelectList(ViewBag.TipoImovelId, "Value", "Text"), "Selecione", new { @class = "form-control input-sm" })*@
                        @Html.ValidationMessageFor(model => model.TipoImovelId, "", new { @class = "text-danger" })
                    </div>
                </div>@*Tipo de comércio*@
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ValorAluguel)
                        @Html.EditorFor(model => model.ValorAluguel, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 16 } })
                        @Html.ValidationMessageFor(model => model.ValorAluguel, "", new { @class = "text-danger" })
                    </div>
                </div>@*Valor do aluguel*@
            </div>@*Quarta linha: DropDownLists da Categoria, Tipo de imóvel e valor do aluguel.*@
            <div class="row">
                <div class="col-lg-12">
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered table-hover">
                            <thead>
                                <tr class="success">
                                    <th>Cobertura</th>
                                    <th>Importância Segurada</th>
                                    <th>Prêmio</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        Incêndio, Raio, Explosão
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.ImportCobertIncendio, new { htmlAttributes = new { @class = "form-control input-sm" } })
                                        @Html.ValidationMessageFor(model => model.ImportCobertIncendio, "", new { @class = "text-danger" })
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.PremioCobertIncendio, new { htmlAttributes = new { @class = "form-control input-sm" } })
                                        @Html.ValidationMessageFor(model => model.PremioCobertPerda, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        Perda ou Pagamento Aluguel
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.ImportCobertPerda, new { htmlAttributes = new { @class = "form-control input-sm" } })
                                        @Html.ValidationMessageFor(model => model.ImportCobertPerda, "", new { @class = "text-danger" })
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.PremioCobertPerda, new { htmlAttributes = new { @class = "form-control input-sm" } })
                                        @Html.ValidationMessageFor(model => model.PremioCobertPerda, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>@*Quinta linha: tabela de importância segurada e prêmio.*@
            <div class="row">
                <div class="col-lg-offset-9">
                    <button type="button" onclick="Calcular()" class="btn btn-primary btn-sm">Calcular</button>
                    <button type="submit" onclick="RemoveMaskAndSubmit()" class="btn btn-primary btn-sm">Salvar</button>
                    <button type="reset" class="btn btn-success btn-sm">Transmitir</button>
                    @Html.ActionLink("Retornar", "Index", null, new { @class = "btn btn-warning btn-sm" })
                </div>
            </div>@*Sexta linha: botões.*@
        </div>
    </div>

    @section ScriptPage
        {

        @*//Script para mascarar o campo CEP*@
        <script>
            jQuery(function ($) {
                $("#CEP").mask("99999-999"); 
            });
        </script>

        @*//Script para mascarar campos monetários*@
        <script type="text/javascript">
            $(function () {
                $("#ValorAluguel").maskMoney({
                    symbol: 'R$ ',
                    showSymbol: true,
                    decimal: ',',
                    thousands: '.',
                    symbolStay: true
                });
            })
        </script>

        @*//RemoveMaskAndSubmit: script para remover máscaras de campos e submeter formulário*@
        <script type="text/javascript">
            function RemoveMaskAndSubmit() {
                $("#CEP").val($('#CEP').val().replace('-', ''));
                $("#ValorAluguel").val($('#ValorAluguel').val().replace('R', '').replace('$', ''));
                $("#ValorAluguel").val($('#ValorAluguel').val().replace('.', ''));
                $('#ImportCobertIncendio').val($('#ImportCobertIncendio').val().replace('.', ','));               
                $('#ImportCobertPerda').val($('#ImportCobertPerda').val().replace('.', ','));
                $('#PremioCobertIncendio').val($('#PremioCobertIncendio').val().replace('.', ','));
                $('#PremioCobertPerda').val($('#PremioCobertPerda').val().replace('.', ','));
                $('#formId').submit();
            }
        </script>

        @*Script para validar CEP. Referência: https://viacep.com.br/exemplo/jquery/*@
        <script type="text/javascript">
            //function ValidaCep()
            $(document).ready(function() {

                function Limpa_Endereco() {
                    // Limpa valores do formulário de cep.
                    $("#Endereco").val("");
                    $("#Bairro").val("");
                    $("#Cidade").val("");
                    $("#Estado").val("");
                    $("#Numero").val("");
                    $("#Complemento").val("");
                }

                //Quando o campo CEP perde o foco.
                $('#CEP').blur(function () {
                    //Nova variável "cep" somente com dígitos.
                    var cep = $('#CEP').val().replace(/\D/g, '');

                    //Verifica se campo CEP não está vazio.
                    if (cep != "") {

                        //Expressão regular para validar o CEP.
                        var validacep = /^[0-9]{8}$/;

                        //Valida o formato do CEP.
                        if (validacep.test(cep)) {

                            //Preenche os campos com "..." enquanto consulta webservice.
                            $("#Endereco").val("...");
                            $("#Bairro").val("...");
                            $("#Cidade").val("...");
                            $("#Estado").val("...");

                            //Consulta o webservice viacep.com.br/
                            $.getJSON("//viacep.com.br/ws/" + cep + "/json/?callback=?", function (dados) {

                                if (!("erro" in dados)) {
                                    //Atualiza os campos com os valores da consulta.
                                    $("#Endereco").val(dados.logradouro);
                                    $("#Bairro").val(dados.bairro);
                                    $("#Cidade").val(dados.localidade);
                                    $("#Estado").val(dados.uf);
                                    $("#Estado").val(dados.numero);
                                }
                                else {
                                    //CEP pesquisado não foi encontrado.
                                    Limpa_Endereco();
                                    alert("CEP não encontrado.");
                                }
                            });
                        }
                        else {
                            //cep é inválido.
                            limpa_formulário_cep();
                            alert("Formato de CEP inválido.");
                        }
                    } //end if.
                    else {
                        //cep sem valor, limpa formulário.
                        Limpa_Endereco();
                    }
                });
            });

        </script>

        @*Script para preencher DropDownList do tipo do imóvel à partir do DropDownList da Categoria.
        Referência: https://pt.stackoverflow.com/questions/76255/como-popular-um-dropdownlist-a-partir-de-outro-dropdownlist*@
        <script type="text/javascript">
            $("#IdentificacaoCategoria").change(function () {
                var selectedItemValue = $(this).val();
                $.ajax({
                    type: "Get",
                    url: '@Url.Action("ObterTipoImovel", "Orcamentos")',
                    data: { "id": selectedItemValue },
                    success: function (data) {
                        $("#TipoImovelId").empty();
                        $("#TipoImovelId").append('<option value>Selecione...</option>');
                        $.each(data, function (id, option) {
                            $("#TipoImovelId").append('<option value="' + option.id + '">' + option.Text + '</option>');
                        });
                    }
                });
            });
        </script>

        <script type="text/javascript">
            function Calcular() {
                var IOF = 0.0738;
                var Comissao = 0.020662;
                var TipoImovelSelecionado = $("#TipoImovelId").val();
                //VA = Valor do Aluguel
                var VA = $("#ValorAluguel").val();
                VA = VA.replace('R', '').replace('$', '');
                VA = VA.replace('.', '');
                //Substituição da vírgula das casas decimais em ponto para realização de cálculo.
                VA = VA.replace(',', '.');
                //Conversão do Valor do Aluguel para ponto flutuante com duas casas decimais.
                floatVA = parseFloat(VA).toFixed(2);

                //IIRE = variável para o valor da IMPORTÂNCIA DA COBERTURA DE INCÊNDIO, RAIO E EXPLOSÃO.
                var IIRE = (parseFloat(floatVA * 200).toFixed(2));

                //IIRE = variável para o valor da IMPORTÂNCIA DA PERDA OU PAGAMENTO ALUGUEL.
                var IPPA = (parseFloat(floatVA * 6).toFixed(2));

                //Atribuição das variáveis nos campos.
                $("#ImportCobertIncendio").val(IIRE);
                $("#ImportCobertPerda").val(IPPA);
                $.ajax({
                    type: "Get",
                    url: '@Url.Action("ObterTaxaImovel", "Orcamentos")',
                    data: { "id": TipoImovelSelecionado },
                    success: function (data) {
                        $.each(data, function (id, option) {
                            //PCIRE = variável para o valor do PRÊMIO DA COBERTURA DE INCÊNDIO, RAIO E EXPLOSÃO.
                            var PCIRE = parseFloat(IIRE * option.Taxa * Comissao).toFixed(2);
                            $("#PremioCobertIncendio").val(PCIRE);

                            //PCPPA = variável para valor do PRÊMIO DA COBERTURA DE PERDA OU PAGAMENTO DE ALUGUEL.
                            var PCPPA = parseFloat(IPPA * option.Taxa * Comissao).toFixed(2);
                            $("#PremioCobertPerda").val(PCPPA);
                        });
                    }
                });            
            }
        </script>
    }
}

@*<script src="~/Content/startbootstrap-sb-admin-2-gh-pages/vendor/jquery/jquery.min.js"></script>
<script src="~/Content/startbootstrap-sb-admin-2-gh-pages/vendor/jquery/jquery.validate.min.js"></script>
<script src="~/Content/startbootstrap-sb-admin-2-gh-pages/vendor/jquery/jquery.validate.unobtrusive.min.js"></script>*@


